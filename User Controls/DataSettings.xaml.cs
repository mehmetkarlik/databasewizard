using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace DatabaseWizard.User_Controls
{
    /// <summary>
    /// Interaction logic for DataSettings.xaml
    /// </summary>
    public partial class DataSettings : UserControl
    {
        public DataSettings()
        {
            InitializeComponent();
            gthis = C.gthis();
        }
        MainWindow gthis;
        DataTable dt;
        bool sonKolonEklendimi = false;
        List<StackPanel> dizi = new List<StackPanel>();
        int conditionCount;
        string query = "";
        DataView dv;

        private void btnBack_Click(object sender, RoutedEventArgs e)
        {
            gthis.dataSettings.Visibility = Visibility.Hidden;
            gthis.chooseFields.Visibility = Visibility.Visible;
        }

        private void btnCancel_Click(object sender, RoutedEventArgs e)
        {
            gthis.Close();
        }

        private void btnNext_Click(object sender, RoutedEventArgs e)
        {
            DataTable dt2 = new DataTable();
            dt2 = dv.ToTable();

            // DataRetrieval' de first veya last record seçildiyse satırların diğerlerini sil dataTable'dan.
            //Burada bool alanlar ve kopya sayısını içeren integer alanlar ekle, default olarak bool olanlar true, integer alanlar dataretrieval'den çektiğin kopya sayısı olsun.


            C.modifiedDataTable = dt2;
            C.copyCount = int.Parse(txtCopyCount.Text);
            gthis.dataSettings.Visibility = Visibility.Hidden;
            gthis.resultScreen.Visibility = Visibility.Visible;
            
        }

        private void UserControl_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if (((UserControl)sender).Visibility == Visibility.Visible)
            {
                stckFilter.Children.Clear();
                lstFields.Items.Clear();
                lstSelectedColumns.Items.Clear();
                query = "";
                dt = C.selectedFieldsDataTable;
                fillDataGrid(dt);
                dv = new DataView(dt);
                string[] columns = new string[dt.Columns.Count];
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    columns[i] = dt.Columns[i].ColumnName;
                    lstFields.Items.Add(new ListItemForField(dt.Columns[i].ColumnName, 0, true));
                }


            }
        }

        private void fillDataGrid(DataTable dt)
        {
            try
            {
                dataGrid.ItemsSource = dt.DefaultView;
                if (sonKolonEklendimi == false)
                {
                    DataGridTextColumn textColumn = new DataGridTextColumn();
                    textColumn.Header = "";
                    textColumn.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
                    dataGrid.Columns.Add(textColumn);
                    sonKolonEklendimi = true;
                }
            }
            catch (Exception)
            {
            }

        }

        private void dataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var grid = (DataGrid)sender;
            foreach (var item in grid.Columns)
            {
                if (item.Header.ToString() == "")
                {
                    item.DisplayIndex = grid.Columns.Count - 1;
                    break;
                }
            }
        }

        private void btnAddCondition_Click(object sender, RoutedEventArgs e)
        {
            StackPanel s = new StackPanel
            {
                Orientation = Orientation.Horizontal,
                Margin = new Thickness(0, 5, 0, 0),
            };

            #region InStack
            ComboBox cmbColumns = new ComboBox
            {
                Width = 200,
                Margin = new Thickness(0, 0, 20, 0)
            };

            for (int i = 0; i < dt.Columns.Count; i++)
            {
                cmbColumns.Items.Add(dt.Columns[i].ColumnName);
            }

            cmbColumns.Tag = s;
            cmbColumns.SelectionChanged += CmbColumns_SelectionChanged;

            ComboBox cmbExpression = new ComboBox
            {
                Width = 100,
                Margin = new Thickness(0, 0, 20, 0),
                HorizontalContentAlignment = HorizontalAlignment.Center
            };
            cmbExpression.Items.Add("=");
            cmbExpression.Items.Add("<>");
            cmbExpression.Items.Add(">");
            cmbExpression.Items.Add(">=");
            cmbExpression.Items.Add("<");
            cmbExpression.Items.Add("<=");
            cmbExpression.Items.Add("LIKE");
            cmbExpression.Items.Add("IS NULL");
            cmbExpression.Items.Add("IS NOT NULL");

            cmbExpression.Tag = s;
            cmbExpression.SelectionChanged += CmbExpression_SelectionChanged;

            TextBox txtQuery = new TextBox
            {
                Width = 200,
                Margin = new Thickness(0, 0, 15, 0)
            };

            txtQuery.Tag = s;
            txtQuery.TextChanged += TxtQuery_TextChanged;

            Button btnDeleteCondition = new Button
            {
                Width = 25
            };

            #region InButton

            Uri uri = new Uri("pack://application:,,,/images/multiply.png", UriKind.Absolute);
            var ib = new ImageBrush
            {
                ImageSource = new BitmapImage(uri)
            };
            Border brdrInDeleteButton = new Border
            {
                Height = 13,
                Width = 13,
                Margin = new Thickness(3, 1, 3, 1),
                Background = ib
            };

            btnDeleteCondition.Content = brdrInDeleteButton;
            btnDeleteCondition.Tag = s;

            btnDeleteCondition.Click += BtnDeleteCondition_Click;
            #endregion

            s.Children.Add(cmbColumns);
            s.Children.Add(cmbExpression);
            s.Children.Add(txtQuery);
            s.Children.Add(btnDeleteCondition);

            #endregion

            stckFilter.Children.Add(s);
            dizi.Add(s);
            conditionCount++;
        }

        private void CmbColumns_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox cmbColumns = (ComboBox)sender;
            UpdateDataTable((StackPanel)cmbColumns.Tag);
        }

        private void CmbExpression_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox cmbExpression = (ComboBox)sender;
            UpdateDataTable((StackPanel)cmbExpression.Tag);
        }

        private void TxtQuery_TextChanged(object sender, TextChangedEventArgs e)
        {
            TextBox txtQuery = (TextBox)sender;
            UpdateDataTable((StackPanel)txtQuery.Tag);
        }

        private void BtnDeleteCondition_Click(object sender, RoutedEventArgs e)
        {
            Button btn = (Button)sender;
            stckFilter.Children.Remove((StackPanel)btn.Tag);
            dizi.Remove((StackPanel)btn.Tag);
            UpdateDataTable();
        }

        private void UpdateDataTable()
        {
            query = "";
            
            for (int i = 0; i < dizi.Count; i++)
            {
                StackPanel sTemp = (StackPanel)dizi[i];
                if (sTemp.Tag != null && sTemp.Tag != "")
                {
                    if (query != "")
                    {
                        query += (" AND " + (string)sTemp.Tag);
                    }
                    else
                    {
                        query += (string)sTemp.Tag;
                    }
                }
            }

            
            dv.RowFilter = query;

            dataGrid.ItemsSource = dv;
            
        }

        private void UpdateDataTable(StackPanel s)
        {
            ComboBox cmbColumns = (ComboBox)s.Children[0];
            ComboBox cmbExpression = (ComboBox)s.Children[1];
            TextBox txtQuery = (TextBox)s.Children[2];
            string query = "";
            if (cmbColumns.SelectedIndex != -1 && cmbExpression.SelectedIndex != -1 && txtQuery.Text != "")
            {


                if (cmbExpression.SelectedItem.ToString() == "LIKE")
                {
                    query = "[" + cmbColumns.SelectedItem.ToString() + "] " + cmbExpression.SelectedItem.ToString() + " '%" + txtQuery.Text + "%'";
                }
                else if (cmbExpression.SelectedItem.ToString() == "IS NOT NULL")
                {
                    query = "[" + cmbColumns.SelectedItem.ToString() + "] " + cmbExpression.SelectedItem.ToString();
                }
                else if (cmbExpression.SelectedItem.ToString() == "IS NULL")
                {
                    query = "[" + cmbColumns.SelectedItem.ToString() + "] " + cmbExpression.SelectedItem.ToString();
                }
                else
                {
                    query = "[" + cmbColumns.SelectedItem.ToString() + "] " + cmbExpression.SelectedItem.ToString() + " '" + txtQuery.Text + "'";
                }

                s.Tag = query;

                query = "";
                for (int i = 0; i < dizi.Count; i++)
                {
                    StackPanel sTemp = (StackPanel)dizi[i];
                    if (sTemp.Tag != null && sTemp.Tag != "")
                    {
                        if (query != "")
                        {
                            query += (" AND " + (string)sTemp.Tag);
                        }
                        else
                        {
                            query += (string)sTemp.Tag;
                        }
                    }
                }
                
                dv.RowFilter = query;
                dataGrid.ItemsSource = dv;
            }
            else if (cmbColumns.SelectedIndex != -1 && cmbExpression.SelectedItem != null && (cmbExpression.SelectedItem.ToString() == "IS NULL" || cmbExpression.SelectedItem.ToString() == "IS NOT NULL") && txtQuery.Text == "")
            {
                if (cmbExpression.SelectedItem.ToString() == "IS NOT NULL")
                {
                    query = cmbColumns.SelectedItem.ToString() + " " + cmbExpression.SelectedItem.ToString();
                }
                else if (cmbExpression.SelectedItem.ToString() == "IS NULL")
                {
                    query = cmbColumns.SelectedItem.ToString() + " " + cmbExpression.SelectedItem.ToString();
                }

                s.Tag = query;

                query = "";
                for (int i = 0; i < dizi.Count; i++)
                {
                    StackPanel sTemp = (StackPanel)dizi[i];
                    if (sTemp.Tag != null && sTemp.Tag != "")
                    {
                        if (query != "")
                        {
                            query += (" AND " + (string)sTemp.Tag);
                        }
                        else
                        {
                            query += (string)sTemp.Tag;
                        }
                    }
                }
                
                dv.RowFilter = query;
                dataGrid.ItemsSource = dv;
            }
            else
            {
                s.Tag = null;
                UpdateDataTable();
            }

        }

        private void btnDeleteSorting_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                lstFields.Items.Add(lstSelectedColumns.SelectedItem);
                lstSelectedColumns.Items.Remove(lstSelectedColumns.SelectedItem);
                if (lstSelectedColumns.Items.Count == 0)
                {
                    btnDeleteSorting.IsEnabled = false;
                }

                if (lstSelectedColumns.Items.Count < 2)
                {
                    btnMoveDown.IsEnabled = false;
                    btnMoveUp.IsEnabled = false;
                }
                lstSelectedColumns.SelectedIndex = 0;

                sortDataGrid();
            }
            catch (Exception)
            {
            }

        }

        private void btnAddSorting_Click(object sender, RoutedEventArgs e)
        {
            popup_Secim.IsOpen = true;
        }

        private void lstFields_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ListBox lst = (ListBox)sender;

            if (lst.SelectedItem != null)
            {
                lstSelectedColumns.Items.Add(lst.SelectedItem);

                lstSelectedColumns.SelectedItem = lst.SelectedItem;

                ListItemForField item = (ListItemForField)lst.SelectedItem;

                lstFields.Items.Remove(lst.SelectedItem);

                btnDeleteSorting.IsEnabled = true;

                if (lstSelectedColumns.Items.Count > 1)
                {
                    btnMoveDown.IsEnabled = true;
                    btnMoveUp.IsEnabled = true;
                }

                popup_Secim.IsOpen = false;

                sortDataGrid();
            }

        }

        private void sortDataGrid()
        {
            string sort = "";
            for (int i = 0; i < lstSelectedColumns.Items.Count; i++)
            {
                ListItemForField item = (ListItemForField)lstSelectedColumns.Items[i];

                if (item.SortOrder == 0)
                {
                    if (sort == "")
                    {
                        sort = "[" + item.Field + "]" + " ASC ";
                    }
                    else
                    {
                        sort += ", [" + item.Field + "]" + " ASC ";
                    }
                }
                else
                {
                    if (sort == "")
                    {
                        sort = "[" + item.Field + "]" + " DESC ";
                    }
                    else
                    {
                        sort += ", [" + item.Field + "]" + " DESC ";
                    }
                }
            }

            dv.Sort = sort;
            dataGrid.ItemsSource = dv;

            
        }

        private void btnMoveUp_Click(object sender, RoutedEventArgs e)
        {
            MoveUp(lstSelectedColumns);
            sortDataGrid();
        }

        private void btnMoveDown_Click(object sender, RoutedEventArgs e)
        {
            MoveDown(lstSelectedColumns);
            sortDataGrid();
        }

        void MoveUp(ListBox myListBox)
        {
            int selectedIndex = myListBox.SelectedIndex;
            if (selectedIndex > 0)
            {
                myListBox.Items.Insert(selectedIndex - 1, myListBox.Items[selectedIndex]);
                myListBox.Items.RemoveAt(selectedIndex + 1);
                myListBox.SelectedIndex = selectedIndex - 1;
            }
        }

        void MoveDown(ListBox myListBox)
        {
            int selectedIndex = myListBox.SelectedIndex;
            if (selectedIndex < myListBox.Items.Count - 1 & selectedIndex != -1)
            {
                myListBox.Items.Insert(selectedIndex + 2, myListBox.Items[selectedIndex]);
                myListBox.Items.RemoveAt(selectedIndex);
                myListBox.SelectedIndex = selectedIndex + 1;

            }
        }

        private void txtSearch_TextChanged(object sender, TextChangedEventArgs e)
        {
            List<ListItemForField> dizi = new List<ListItemForField>();

            for (int i = 0; i < lstFields.Items.Count; i++)
            {
                ListItemForField field = (ListItemForField)lstFields.Items[i];
                dizi.Add(field);
            }



            for (int i = 0; i < dizi.Count; i++)
            {
                bool deger = dizi[i].Field.Contains(txtSearch.Text);
                if (deger)
                {
                    dizi[i].ItemVisibility = true;
                }
                else
                {
                    dizi[i].ItemVisibility = false;
                }
            }


            lstFields.Items.Clear();

            for (int i = 0; i < dizi.Count; i++)
            {
                lstFields.Items.Add(dizi[i]);
            }

        }

        private void cmbSorting_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            sortDataGrid();
        }

        private void ScrollViewer_PreviewMouseWheel(object sender, MouseWheelEventArgs e)
        {
            ScrollViewer scv = (ScrollViewer)sender;
            scv.ScrollToVerticalOffset(scv.VerticalOffset - e.Delta);
            e.Handled = true;
        }
    }

    public class ListItemForField
    {
        public string Field { get; set; }
        public int SortOrder { get; set; }
        public bool ItemVisibility { get; set; }
        public ListItemForField(string field, int sorting, bool visible)
        {
            Field = field;
            SortOrder = sorting;
            ItemVisibility = visible;
        }

    }
}
